DROP DATABASE IF EXISTS taskForce;

CREATE DATABASE taskForce
  DEFAULT CHARACTER SET utf8
  DEFAULT COLLATE utf8_general_ci;

USE taskForce;

CREATE TABLE users (
  uuid VARCHAR(36) NOT NULL PRIMARY KEY,
  createAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  email VARCHAR(128) NOT NULL UNIQUE,
  name VARCHAR(255) NOT NULL,
  password CHAR(255) NOT NULL,
  role INT NOT NULL,
  FOREIGN KEY (role) REFERENCES roles(id),
  city INT NOT NULL,
  FOREIGN KEY (city) REFERENCES cities(id),
);

CREATE TABLE executorProfiles (
  executorId VARCHAR(36) NOT NULL PRIMARY KEY,
  FOREIGN KEY (executorId) REFERENCES users(uuid),
  avatarSrc VARCHAR(255),
  birthDate TIMESTAMP,
  phone CHAR(255),
  telegram VARCHAR(255),
  bio TEXT,
  status INT NOT NULL,
  FOREIGN KEY (status) REFERENCES executorStatuses(id)
);

CREATE TABLE executorStatuses (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  executorStatus VARCHAR(255) NOT NULL
)

CREATE TABLE roles (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  role VARCHAR(255) NOT NULL
)

CREATE TABLE cities (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(128) NOT NULL,
  lat DECIMAL(9,7) NOT NULL,
  long DECIMAL(9,7) NOT NULL
)

CREATE TABLE categories (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  icon VARCHAR(255),
);

CREATE TABLE executorCategories (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  categoryId INT NOT NULL,
  FOREIGN KEY (categoryId) REFERENCES categories(id),
  executorId VARCHAR(36) NOT NULL,
  FOREIGN KEY (executorId) REFERENCES users(uuid)
);

CREATE TABLE tasks (
  uuid VARCHAR(36) NOT NULL PRIMARY KEY,
  createAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  expiryDate TIMESTAMP NOT NULL,
  budget INT NOT NULL,
  categoryId INT NOT NULL,
  FOREIGN KEY (categoryId) REFERENCES categories(id),
  lan POINT NOT NULL,
  long POINT NOT NULL,
  status INT NOT NULL,
  FOREIGN KEY (status) REFERENCES taskStatuses(id)
);

CREATE TABLE taskStatuses (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  taskStatus VARCHAR(255) NOT NULL
)

CREATE TABLE userTasks (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  userId VARCHAR(36) NOT NULL,
  FOREIGN KEY (userId) REFERENCES users(uuid),
  taskId VARCHAR(36) NOT NULL,
  FOREIGN KEY (taskId) REFERENCES tasks(uuid),
)

CREATE TABLE files (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  fileSrc VARCHAR(255) NOT NULL
);

CREATE TABLE taskFiles (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  fileId INT NOT NULL,
  FOREIGN KEY (fileId) REFERENCES files(id),
  taskId VARCHAR(36) NOT NULL,
  FOREIGN KEY (taskId) REFERENCES tasks(uuid)
);

CREATE TABLE responds (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  taskId VARCHAR(36) NOT NULL,
  FOREIGN KEY (taskId) REFERENCES tasks(uuid),
  executorId VARCHAR(36) NOT NULL,
  FOREIGN KEY (executorId) REFERENCES users(uuid),
  createAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  price INT NOT NULL,
  comment TEXT
);

CREATE TABLE reviews (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  taskId VARCHAR(36) NOT NULL,
  FOREIGN KEY (taskId) REFERENCES tasks(uuid),
  executorId VARCHAR(36) NOT NULL,
  FOREIGN KEY (executorId) REFERENCES users(uuid),
  clientId VARCHAR(36) NOT NULL,
  FOREIGN KEY (clientId) REFERENCES users(uuid),
  score INT NOT NULL,
  comment TEXT,
  createAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  success BOOLEAN
);

CREATE INDEX t_name ON tasks(name);
CREATE INDEX c_name ON categories(name);
